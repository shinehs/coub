$baseFontSize: 16;
$psdWidth: 750 !default; //rem
$cssjsdate: 20181226 !default;

@function px2rem($val) {
    @return ($val / $baseFontSize) * 1rem;
}

@mixin attr2all($cssAttr, $val...) {
    -webkit-#{$cssAttr}: $val;
    -moz-#{$cssAttr}: $val;
    -ms-#{$cssAttr}: $val;
    -o-#{$cssAttr}: $val;
    #{$cssAttr}: $val;
}

@mixin opacity($alpha) {
    opacity: $alpha;
    filter: #{'alpha(opacity='+ ($alpha * 100) +')'};
}

@function dpr($val) {
    @return round($val * 100) / 100 / 2 * 1px;
}

@mixin clearfix {
    zoom: 1;

    &:after {
        content: '';
        display: block;
        height: 0;
        overflow: hidden;
        clear: both;

    }
}

@function multiStr($str, $n) {
    @if type-of($str)=='number' {
        @return $str * $n;
    }

    @if type-of($str)=='list' {
        $newList: ();

        @each $item in $str {
            $newList: append($newList, multiStr($item, $n));
        }

        @return $newList;
    }

    @return $str;
}

@mixin dpr ($key, $val) {
    $scale: 750 / $psdWidth;

    [data-dpr="3"] & {
        // 6P
        #{$key}: multiStr($val, 1.5 * $scale); /*no*/
    }

    [data-dpr="2.5"] & {
        #{$key}: multiStr($val, 1.25 * $scale); /*no*/
    }

    [data-dpr="2"] & {
        // 5, 6
        #{$key}: multiStr($val, 1 * $scale); /*no*/
    }

    [data-dpr="1.5"] & {
        // android
        #{$key}: multiStr($val, 0.75 * $scale); /*no*/
    }

    [data-dpr="1"] & {
        #{$key}: multiStr($val, 0.5 * $scale); /*no*/
    }

    #{$key}: multiStr($val, 0.5 * $scale); /*no*/
}

@mixin isIphoneX {
    @media only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) {
        & {
            @content;
        }
    }
}

@mixin imgBkgd($url:none, $color: transparent, $pos: center, $rept: no-repeat, $size: cover) {
    background: $color url('../images/'+ $url + '?'+ $cssjsdate) $pos $rept;
    background-size: $size;
}

@mixin imgBkgd-b64($url, $color: transparent, $pos: center, $rept: no-repeat, $size: cover) {
    background: $color inline-image('../images/base64/'+ $url) $pos $rept;
    background-size: $size;
    -webkit-background-size: $size;
}


@mixin autoSize($key, $value, $viewWidth: 320) {
    #{$key}: #{$value}px;
    #{$key}: #{$value / $viewWidth * 100vw};
}

$mqViewports: 320px 360px 375px 414px 480px;

@mixin mediaQuery($viewport) {
    @media only screen and (min-width: $viewport) {
        @content;
    }

    @media only screen and (min-width: $viewport) and (min-device-width: $viewport) {
        @content;
    }
}

@mixin borderWithDecimal($cssPx, $scale, $color, $side) {
    position: relative;

    .border-#{$side} {
        position: absolute;
        #{$side}: 0;

        @if $side=='left'or $side=='right' {
            top: 0;
            bottom: 0;
            height: 100%;
            width: $cssPx;
            -webkit-transform: scaleX($scale);
        }

        @if $side=='top'or $side=='bottom' {
            left: 0;
            right: 0;
            height: $cssPx;
            width: 100%;
            -webkit-transform: scaleY($scale);
        }

        background-color: $color;
    }
}

/* mixin
   * -------------------------- */
%avoid_spacing {
    font-size: 0;
    letter-spacing: -4px;
}

%resume_avoid_spacing {
    display: inline-block;
    letter-spacing: normal;
    vertical-align: top;
}

%fixed_width_content {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}

%fixed_width_multiLine_content {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    text-overflow: ellipsis;
    overflow: hidden;
}

@mixin ellipsis {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}
/* other */
.cover{
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    min-height: 100%;
    margin: auto;
}